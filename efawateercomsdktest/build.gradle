apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.dcendents.android-maven'
group = 'com.github.jehadmashhour'


android {
    compileSdkVersion 30
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        flavorDimensions 'default'

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    signingConfigs {
        release {
            storeFile file("\\signing\\efawateercomsdk_keystore.jks")
            storePassword "Test@123"
            keyAlias "efawateercomsdk_keystore"
            keyPassword "Test@123"
        }
    }


    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    productFlavors {
        live {

        }

        local {

        }

    }

    defaultPublishConfig "liveRelease"


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation('androidx.test.ext:junit:1.1.2') {
        exclude group: 'androidx.annotation'
        exclude group: 'androidx.lifecycle'
        exclude group: 'junit'

    }
    androidTestImplementation('androidx.test.espresso:espresso-core:3.3.0') {
        exclude group: 'androidx.annotation'
        exclude group: 'com.google.code.findbugs'
        exclude group: 'junit'
    }

    api fileTree(dir: "libs", include: ["*.jar"])
    api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    api 'androidx.core:core-ktx:1.3.2'
    api 'androidx.appcompat:appcompat:1.2.0'
    api 'androidx.constraintlayout:constraintlayout:2.0.4'

    // Koin AndroidX Scope features
    api "org.koin:koin-androidx-scope:$koin_version"
// Koin AndroidX ViewModel features
    api "org.koin:koin-androidx-viewmodel:$koin_version"
// Koin AndroidX Fragment features
    api "org.koin:koin-androidx-fragment:$koin_version"
// Koin AndroidX WorkManager
    api "org.koin:koin-androidx-workmanager:$koin_version"
// Koin AndroidX Jetpack Compose
    api "org.koin:koin-androidx-compose:$koin_version"
// Koin AndroidX Experimental features
    api "org.koin:koin-androidx-ext:$koin_version"

    //image
    api 'com.github.bumptech.glide:glide:4.11.0'
    kapt 'com.github.bumptech.glide:compiler:4.11.0'

    //retrofit
    api "com.squareup.retrofit2:converter-gson:2.9.0"
    api "com.squareup.retrofit2:adapter-rxjava2:2.9.0"


    //firebase
    api('com.google.firebase:firebase-config-ktx:20.0.0') {
        exclude group: 'androidx.collection'
        exclude group: 'androidx.core'
        exclude group: 'androidx.fragment'
        exclude group: 'org.jetbrains.kotlin'
    }

    api ('com.google.firebase:firebase-firestore-ktx:22.0.0'){
        exclude group: 'androidx.collection'
        exclude group: 'androidx.core'
        exclude group: 'androidx.fragment'
        exclude group: 'org.jetbrains.kotlin'
    }
//    api 'com.google.firebase:firebase-crashlytics-ktx'

    //Room
    def room_version = "2.2.5"
    api "androidx.room:room-ktx:$room_version"
    api "androidx.room:room-runtime:$room_version"
    api "androidx.room:room-rxjava2:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    //Rx
    api 'io.reactivex.rxjava2:rxandroid:2.1.1'
    api 'io.reactivex.rxjava2:rxjava:2.2.10'
    api "io.reactivex.rxjava2:rxkotlin:2.4.0"

}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.javaDirectories
}

artifacts {
    archives sourcesJar
}

if (android.productFlavors.size() > 0) {
    android.libraryVariants.all { variant ->
        def bundleTask = tasks["bundle${variant.name.capitalize()}Aar"]
        artifacts {
            archives(bundleTask.archivePath) {
                classifier variant.name.capitalize()
                builtBy bundleTask
                name = project.name
            }
        }
    }
}